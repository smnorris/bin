#!/usr/bin/env python

# Just a wrapper around ogr2ogr
# Provided an input multi-layer source (typically gdb), loop through layers,
# loading each to specified db, defaulting to db specified in environment
# variable DATABASE_URL in form of:
# (http://docs.sqlalchemy.org/en/latest/core/engines.html#engine-creation-api)

# defaults to reprojecting to EPSG:3005, BC Albers

import fiona
import subprocess
import click
from urllib.parse import urlparse
import os


def parse_db_url(db_url):
    # provided a db url, return a dict with connection properties
    u = urlparse(db_url)
    db = {}
    db['database'] = u.path[1:]
    db['user'] = u.username
    db['password'] = u.password
    db['host'] = u.hostname
    db['port'] = u.port
    return db


@click.command()
@click.option('--db_url', '-db', default=os.environ['DATABASE_URL'])
@click.option('--schema', '-s', default="public")
@click.option('--t_srs', '-t_srs', default="EPSG:3005")
@click.option('--layers', '-l')
@click.argument('in_file', type=click.Path(exists=True))
def gdb2pg(in_file, db_url, schema, t_srs, layers):
    db = parse_db_url(db_url)

    # what layers are present?
    src_layers = fiona.listlayers(in_file)
    if layers:
        out_layers = layers.split(",")
    else:
        out_layers = src_layers
    for layer in out_layers:
        if layer in src_layers:
            command = ["ogr2ogr",
                       "--config PG_USE_COPY YES",
                       "-t_srs "+t_srs,
                       "-f PostgreSQL",
                       'PG:"host={h} user={u} dbname={db} password={pwd}"'.format(
                          h=db['host'],
                          u=db['user'],
                          db=db['database'],
                          pwd=db['password']),
                       "-lco OVERWRITE=YES",
                       "-lco SCHEMA={schema}".format(schema=schema),
                       "-lco GEOMETRY_NAME=geom",
                       "-nln "+layer.lower(),
                       in_file,
                       layer]
            cmd = " ".join(command)
            click.echo("Running : "+cmd)
            subprocess.call(cmd, shell=True)
        else:
            click.echo("Layer "+layer+" not present in source .gdb")


if __name__ == '__main__':
    gdb2pg()
