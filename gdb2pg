#!/usr/bin/env python

# Just a wrapper around ogr2ogr
# Provided an input multi-layer source (typically gdb), loop through layers,
# loading each to specified db, defaulting to db specified in environment
# variable DATABASE_URL in form of:
# (http://docs.sqlalchemy.org/en/latest/core/engines.html#engine-creation-api)

# defaults to reprojecting to EPSG:3005, BC Albers

import fiona
import subprocess
import click
from urllib.parse import urlparse
import os


@click.command()
@click.option("--db_url", "-db", default=os.environ["DATABASE_URL"])
@click.option("--schema", "-s", default="public")
@click.option("--t_srs", "-t_srs", default="EPSG:3005")
@click.option("--s_srs", "-s_srs")
@click.option("--layers", "-l")
@click.argument("in_file", type=click.Path(exists=True))
def gdb2pg(in_file, db_url, schema, t_srs, s_srs, layers):
    # parse the db url into individual variables
    u = urlparse(db_url)
    database = u.path[1:]
    user = u.username
    password = u.password
    host = u.hostname
    port = u.port

    # what layers are present?
    src_layers = fiona.listlayers(in_file)
    if layers:
        out_layers = layers.split(",")
    else:
        out_layers = src_layers
    for layer in out_layers:
        if layer in src_layers:
            command = [
                "ogr2ogr",
                "-t_srs",
                t_srs,
                "-f",
                "PostgreSQL",
                f"PG:host={host} port={port} user={user} dbname={database} password={password}",
                "-lco",
                "OVERWRITE=YES",
                "-lco",
                f"SCHEMA={schema}",
                "-lco",
                "GEOMETRY_NAME=geom",
                "-nln",
                layer.lower(),
                in_file,
                layer,
            ]
            if s_srs:
                command = command + ["-s_srs", s_srs]
            click.echo("Running : " + " ".join(command))
            subprocess.run(command)
        else:
            click.echo(f" Layer {layer} not present in source .gdb")


if __name__ == "__main__":
    gdb2pg()
